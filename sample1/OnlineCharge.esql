 DECLARE Oc_replayThresholdCnt EXTERNAL INTEGER 3 ;


DECLARE threshold_RetryCnt EXTERNAL INTEGER 3 ;
DECLARE SchemaName EXTERNAL CHARACTER '' ;


CREATE COMPUTE MODULE ParseAndEnrichMessage_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		CREATE FIELD Environment.Variables ;
		DECLARE enVariables REFERENCE TO Environment.Variables ;
		DECLARE ch_PayRetryStatQuery, ch_inmsg CHARACTER '' ;
		DECLARE bl_inpayload BLOB ;
		
		DECLARE rfMobily REFERENCE TO InputRoot.XMLNSC.MOBILY_BSL_SR ;
		SET enVariables.inputMsg = InputRoot.XMLNSC ;
		
		SET bl_inpayload 	= ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208);
		SET ch_inmsg 	= CAST(bl_inpayload AS CHARACTER CCSID 1208 ENCODING 273);
		SET enVariables.ch_inmsg = ch_inmsg ;
		
		-- Defect-QM-5500 changes start
		SET Environment.Variables.CorrelId = InputRoot.MQMD.CorrelId;
		-- Defect-QM-5500 changes end
		
		SET enVariables.srId 		= rfMobily.ServiceRequestId ;
		SET enVariables.LineNumber	= rfMobily.LineNumber ;
		SET enVariables.retry 		= COALESCE(rfMobily.IsRetry, 'N') ;
		SET enVariables.retryCnt 	= COALESCE(rfMobily.RetryCount, '0') ; -- element name has to verify on input message
		
		IF enVariables.retry = 'Y' AND threshold_RetryCnt > CAST(enVariables.retryCnt AS INTEGER) THEN
			SET enVariables.updatePyt= PASSTHRU('UPDATE SR_PAYMENT_RETRY_TBL  SET STATUS = 2 WHERE SR_ID = ? AND STATUS=1' VALUES(enVariables.srId));
			
		END IF ;
		
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC ;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ConstructErrorMessage_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		---
		-- Error tracking
		DECLARE enVariables REFERENCE TO Environment.Variables ;
		DECLARE paymentRequest REFERENCE TO enVariables.inputMsg.MOBILY_BSL_SR ;
		DECLARE trackingPoint REFERENCE TO enVariables ; -- pending
		DECLARE bl_ERRpayLoad BLOB ;
		DECLARE replayCnt INTEGER ;
		SET replayCnt = CAST(COALESCE(InputRoot.MQRFH2.usr.(MQRFH2.Field)replayQCnt, '0') AS INTEGER) + 1 ;
	/*	
		IF replayCnt < Oc_replayThresholdCnt THEN
			IF Environment.MessageType = 'REPLY' THEN
				-- Store Environment
				SET OutputRoot.XMLNSC.Environment = Environment;
				DECLARE PrimaryKey CHARACTER '';
				SET PrimaryKey = SUBSTRING(CAST(InputRoot.MQMD.CorrelId AS CHARACTER) FROM 3 FOR 48) ;
				INSERT INTO Database.SR_COMMON_ASYNC_MQCALL_TBL(MSG_ID, TIME_STAMP, STORED_ENV)
				VALUES (PrimaryKey, CURRENT_TIMESTAMP, ASBITSTREAM(OutputRoot.XMLNSC, 546, 1208));
			ELSE
					PASSTHRU('DELETE FROM SR_PAYMENT_RETRY_TBL WHERE SR_ID = ?', enVariables.inputMsg.MOBILY_BSL_SR.ServiceRequestId);
			END IF ;
			
			SET OutputRoot = NULL ;
			
			CALL CopyEntireMessage();
			
			
			SET OutputExceptionList = NULL ;
			SET OutputLocalEnvironment = NULL ;
			SET OutputRoot.MQMD.Format = 'MQHRF2' ;
			SET OutputRoot.MQRFH2 = NULL ;
			CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'MQRFH2' ;
			CREATE LASTCHILD OF OutputRoot.MQRFH2 NAME 'usr' ;
			DECLARE refMQRFH2 REFERENCE TO OutputRoot.MQRFH2 ;
			SET refMQRFH2.usr.(MQRFH2.Field)replayQCnt 	= replayCnt ;
			DECLARE returnValue BOOLEAN;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = InputRoot.MQMD.SourceQueue ;
			--SET returnValue = SLEEP(1000);
			
			--PROPAGATE TO TERMINAL 'out1' ;
		ELSE
	*/		UPDATE Database.SR_PAYMENT_TBL AS paytbl SET LAST_UPDATE_TIME = CURRENT_DATE, STATUS = 5072, 
									ERROR_CODE = enVariables.errorCode WHERE paytbl.SR_ID = paymentRequest.ServiceRequestId AND paytbl.STATUS <> '6' ;
			
			SET enVariables.AuditEntry.TRACKING_POINT 	= 6761 ;
			SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 2 ;
			SET enVariables.AuditEntry.MESSAGE 			= enVariables.ch_outMsg ;
			CALL callAudit(enVariables.AuditEntry) ;
		
		
		IF Environment.MessageType = 'REPLY' THEN
	move enVariables to Environment ;
	END IF ;
			DECLARE inCCSID INT InputProperties.CodedCharSetId;
			DECLARE inEncoding INT InputProperties.Encoding;
			DECLARE inBitStream BLOB ASBITSTREAM(InputRoot.BLOB, inEncoding, inCCSID); 
			SET OutputRoot.XMLNSC =NULL;
			
			SET OutputRoot.XMLNSC.FAULT_MESSAGE.ERROR_INFO=Environment.Variables.ErrorInfo;
			
			SET OutputRoot.XMLNSC.FAULT_MESSAGE.SOURCE_QUEUE 	= InputRoot.MQMD.SourceQueue ;
			SET OutputRoot.XMLNSC.FAULT_MESSAGE.SR_ID 			= enVariables.srId ;
			SET OutputRoot.XMLNSC.FAULT_MESSAGE.ChannelTransId 	= enVariables.ChannelTransId ;
			SET OutputRoot.XMLNSC.FAULT_MESSAGE.LineNumber 		= enVariables.LineNumber ;
			
			CREATE LASTCHILD OF OutputRoot.XMLNSC.FAULT_MESSAGE.ORIGINAL_MESSAGE PARSE(inBitStream, inEncoding, inCCSID,'BLOB');
			
			
			PROPAGATE TO TERMINAL 'out' ;
	--	END IF ;	
--		SET enVariables.newQ2 =						
--		PASSTHRU('INSERT INTO Database.SR_PAYMENT_AUDIT_TBL (ID, SR_ID, CHANNEL_TRANS_ID, LINE_NUMBER,TIMESTAMP, TRACKING_POINT, TRACKING_POINT_STATUS,
--				BE_REFERENCE_NUMBER, NEW_BALANCE, MESSAGE, BE_REFERENCE_ID, BE_REFERENCE_TYPE,MESSAGE_ID) VALUES (SR_PAYMENT_AUDIT_SEQ.NEXTVAL,?,?,?,?,?,?,?,?,?,?,?,?)'
--				VALUES (COALESCE(paymentRequest.ServiceRequestId, ''),paymentRequest.ChannelTransId,paymentRequest.LineNumber, 
--				6761,2, COALESCE(trackingPoint.BackEndRefNumber, '') ,COALESCE(trackingPoint.NewBalance, ''), 
--				enVariables.ch_outMsg, COALESCE(trackingPoint.BackEndRefId, ''), COALESCE(trackingPoint.BackEndRefNumberType, ''), COALESCE(paymentRequest.ReportMsgId, ''))) ;
				
		
		---
		
		RETURN FALSE; 
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	
	CREATE PROCEDURE callAudit(IN env REFERENCE) BEGIN
		SET env.ActualData = OutputRoot ;
		SET OutputRoot.XMLNSC = NULL ;
		CALL createAuditMessage_ONL(env) ;
		SET OutputRoot.XMLNSC = env.OutputRoot.XMLNSC ;
		PROPAGATE TO LABEL 'AUDIT' DELETE NONE ;
		SET OutputRoot = env.ActualData ;
		SET env.OutputRoot = NULL ;
		SET env.ActualData = NULL ;
	END;
	
END MODULE;




CREATE COMPUTE MODULE OnlineChargeService_Sender_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE enVariables REFERENCE TO Environment.Variables ;
		DECLARE paymentRequest REFERENCE TO enVariables.inputMsg.MOBILY_BSL_SR ;
		DECLARE trackingPoint REFERENCE TO enVariables ; -- pending
		
		DECLARE replayCnt INTEGER ;
--		SET replayCnt = CAST(COALESCE(InputRoot.MQRFH2.usr.(MQRFH2.Field)replayQCnt, '0') AS INTEGER) + 1 ;
		
		IF replayCnt < Oc_replayThresholdCnt THEN
			THROW USER EXCEPTION ;
		
		ELSE
			UPDATE Database.SR_PAYMENT_TBL AS patble SET LAST_UPDATE_TIME = CURRENT_DATE, STATUS = 'STATUS_FAILED_SENT_TO_ONLINE_CHARGING (5072)', 
									ERROR_CODE = enVariables.errorCode WHERE patble.SR_ID = paymentRequest.ServiceRequestId AND patble.STATUS <> '6' ;
			
			SET enVariables.AuditEntry.TRACKING_POINT 	= 6761 ;
			SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 2 ;
			SET enVariables.AuditEntry.MESSAGE 			= CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
			CALL callAudit(enVariables.AuditEntry) ;
		END IF ;						
--		SET enVariables.newQ3 =
--		PASSTHRU('INSERT INTO Database.SR_PAYMENT_AUDIT_TBL (ID, SR_ID, CHANNEL_TRANS_ID, LINE_NUMBER,TIMESTAMP, TRACKING_POINT, TRACKING_POINT_STATUS,
--				BE_REFERENCE_NUMBER, NEW_BALANCE, MESSAGE, BE_REFERENCE_ID, BE_REFERENCE_TYPE,MESSAGE_ID) VALUES (SR_PAYMENT_AUDIT_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
--				VALUES (COALESCE(paymentRequest.ServiceRequestId, ''),paymentRequest.ChannelTransId,paymentRequest.LineNumber, 
--				6761,2, COALESCE(trackingPoint.BackEndRefNumber, '') ,COALESCE(trackingPoint.NewBalance, ''), 
--				enVariables.ch_outMsg, COALESCE(trackingPoint.BackEndRefId, ''), COALESCE(trackingPoint.BackEndRefNumberType, ''), COALESCE(paymentRequest.ReportMsgId, ''))) ;
				
		
		RETURN FALSE ;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
	
	CREATE PROCEDURE callAudit(IN env REFERENCE) BEGIN
		SET env.ActualData = OutputRoot ;
		SET OutputRoot.XMLNSC = NULL ;
		CALL createAuditMessage_ONL(env) ;
		SET OutputRoot.XMLNSC = env.OutputRoot.XMLNSC ;
		PROPAGATE TO LABEL 'AUDIT' DELETE NONE ;
		SET OutputRoot = env.ActualData ;
		SET env.OutputRoot = NULL ;
		SET env.ActualData = NULL ;
	END;
	

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
 

CREATE COMPUTE MODULE OnlineChargeService_ReplyProcessing
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		DECLARE enVariables REFERENCE TO Environment.Variables ;
		DECLARE replyMsg REFERENCE TO InputRoot.XMLNSC ;
		SET Environment.MessageType = 'REPLY' ;
		DECLARE SRID, ch_respInMsg CHARACTER '' ;
		DECLARE bl_inReppayload BLOB ;
		
		SET enVariables.ch_respInMsg = InputRoot.XMLNSC ;
		
		SET bl_inReppayload	= ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208);
		SET ch_respInMsg 	= CAST(bl_inReppayload AS CHARACTER CCSID 1208 ENCODING 273);
		
--		DECLARE errResp REFERENCE TO replyMsg.MOBILY_BSL_SR_REPLY ;
		
		SET enVariables.SRID 			= replyMsg.PaymentAdjustmentRs.MsgRsHdr.RqUID ;
		SET SRID						= enVariables.SRID ;
		SET enVariables.replyStatusCode = replyMsg.PaymentAdjustmentRs.MsgRsHdr.StatusCode ;
		SET enVariables.reqId 			= replyMsg.PaymentAdjustmentRs.Body.AdjustmentResponse.RequestId ;
		SET enVariables.msgId = SUBSTRING(CAST(InputRoot.MQMD.MsgId AS CHARACTER) FROM 3 FOR 48) ;
		
		--get Payment information
		SET enVariables.paymentInfo.SR_PAYMENT_TBL[] = SELECT ptmtbl.CHANNEL_TRANS_ID,ptmtbl.LINE_NUMBER, ptmtbl.PAYMENT_REF_NUM_TO_REVERSE, ptmtbl.AMOUNT, ptmtbl.DEAL_NAME, ptmtbl.IS_NEW_CONTROL, 
									ptmtbl.SR_ID,ptmtbl.ADJUSTMENT_TYPE,ptmtbl.REASON_CODE, ptmtbl.DEAL_START_DT,ptmtbl.DEAL_END_DT,ptmtbl.SKIP_BE,ptmtbl.ACCOUNT_NUMBER,ptmtbl.FINAL_REPLY_QUEUE,
									ptmtbl.FINAL_REPLY_QUEUE_MANAGER,ptmtbl.IS_REFILL,ptmtbl.FUNC_ID, ptmtbl.IS_CLOSED_ACCOUNT,ptmtbl.DAID, ptmtbl.DAAdjFlag, ptmtbl.PLANCATEGORY, ptmtbl.PAID_BY,ptmtbl.FEEFLAG 
									FROM Database.SR_PAYMENT_TBL AS ptmtbl WHERE ptmtbl.SR_ID = SRID ;
		
       
		DECLARE payment REFERENCE TO enVariables.paymentInfo.SR_PAYMENT_TBL ;
		SET enVariables.finalReplyQueue = COALESCE(payment.FINAL_REPLY_QUEUE, '') ;
		SET enVariables.finalReplyQueueManager = COALESCE(payment.FINAL_REPLY_QUEUE_MANAGER, '') ;
		SET enVariables.paymentRefNumber = COALESCE(payment.PAYMENT_REF_NUM_TO_REVERSE, '') ;
		-- data from SR_PAYMENT_REQUEST_TEMP_TBL								
		SET enVariables.paymentReqTemp.SR_PAYMENT_REQUEST_TEMP_TBL[] = SELECT ptmptbl.SR_ID,ptmptbl.CHNL_MSG_ID,ptmptbl.CHNL_REPLY_TO_Q_NAME, ptmptbl.CHNL_REPLY_TO_QMGR_NAME, ptmptbl.MESSAGE 
											FROM Database.SR_PAYMENT_REQUEST_TEMP_TBL AS ptmptbl WHERE ptmptbl.SR_ID = SRID ;

			 						
		SET enVariables.srId = SRID ;
		SET enVariables.ChannelTransId = payment.CHANNEL_TRANS_ID;
        SET enVariables.LineNumber = payment.LINE_NUMBER;
            
		--data from SR_SERVICEREQUEST_TBL
		SET enVariables.serviceRequest.SR_SERVICEREQUEST_TBL[] = SELECT srvre.TIME_RECIEVED, srvre.CHANNEL_ID, srvre.STATUS, srvre.FUNC_ID, srvre.ERROR_CODE, srvre.MSG_VERSION, srvre.SR_DATE 
											FROM Database.SR_SERVICEREQUEST_TBL AS srvre WHERE srvre.SR_ID = SRID ;
											
		SET enVariables.errorCode 		= enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.ERROR_CODE ;
		SET enVariables.MsgVersion 		= enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.MSG_VERSION ;
		
		DECLARE SR_DATE CHARACTER;
	--	DECLARE TIME_RECIEVED CHARACTER;
		SET  SR_DATE  = enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.SrDate;--enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.SR_DATE;
	--	SET  TIME_RECIEVED  = CAST(enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.TIME_RECIEVED AS TIM;
		DECLARE Indate CHARACTER;
		DECLARE Indate1 CHARACTER;
		DECLARE Indate2 CHARACTER;
		DECLARE Indate3 CHARACTER;
		DECLARE FinalDate CHARACTER;
		SET Indate = SUBSTRING(SR_DATE from 0 for 11);
		SET Indate1 = SUBSTRING(SR_DATE from 12 for 8);
		SET Indate2 = REPLACE(Indate,'-', '');
		SET Indate3 = REPLACE(Indate1,':', '');
		SET FinalDate = Indate2 ||Indate3;


		SET enVariables.SrDate 			= FinalDate;--enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.SR_DATE ;
		SET enVariables.SrReceiveTime 	= CAST(enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.TIME_RECIEVED AS CHARACTER FORMAT 'yyyyMMddHHmmss');--  FinalDate;--enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.TIME_RECIEVED ;
		SET enVariables.MsgVersion 		= enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.MSG_VERSION ;
		
		SET enVariables.RequesterChannelId = enVariables.serviceRequest.SR_SERVICEREQUEST_TBL.CHANNEL_ID ; 
		
				---Audit Entry--
		SET enVariables.AuditEntry.SR_ID 			= SRID ;
		SET enVariables.AuditEntry.CHANNEL_TRANS_ID = payment.CHANNEL_TRANS_ID ;
		SET enVariables.AuditEntry.LINE_NUMBER 		= payment.LINE_NUMBER ;
		SET enVariables.AuditEntry.MESSAGE_ID 		= enVariables.msgId ;
		
		SET enVariables.AuditEntry.TRACKING_POINT 	= 6762 ;
		SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 1 ; -- Vishnu
--		SET enVariables.AuditEntry.MESSAGE 			= CAST(ASBITSTREAM(Environment.Variables.inputMsg ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
		SET enVariables.AuditEntry.MESSAGE 			= CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273);
		--CALL callAudit(enVariables.AuditEntry) ;	 			
		IF enVariables.replyStatusCode IN ('I000000', 'W220100', 'W220101') THEN
			CALL callAudit(enVariables.AuditEntry) ;
			IF enVariables.paymentInfo.SR_PAYMENT_TBL.ADJUSTMENT_TYPE = '2' THEN 
				--JK19-4555 
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					UPDATE Database.SR_PAYMENT_TBL AS ptt SET STATUS = 6, ERROR_CODE = '0', PAYMENT_REVERSAL_APPLIED = 'Yes' WHERE ptt.PAYMENT_REF_NUMBER = enVariables.inputMsg.MOBILY_BSL_SR.PaymentReferenceNumber;-- SR_ID = SRID ;
				ELSE
					UPDATE Database.SR_PAYMENT_TBL AS ptt SET STATUS = 6, ERROR_CODE = '0' WHERE ptt.SR_ID = SRID ;
				END IF;
				UPDATE Database.sr_servicerequest_tbl AS ptt SET STATUS = 6 WHERE ptt.SR_ID = SRID ;
				
				--IF enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' THEN
					IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId <> 'SIEBEL') THEN 
					--SendSFRT from flow chart
						SET enVariables.SrStatus = '6' ;
						PROPAGATE TO LABEL 'SFRT' ;
						SET OutputRoot.XMLNSC = NULL ;
					END IF;
				-- END IF;
				--Suppemetary service Async reply 
				IF enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'ADJUSTMENT_PAYMENT' AND (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL')THEN
						SET enVariables.SrStatus = '6' ;
						PROPAGATE TO LABEL 'SFRT' ;
						SET OutputRoot.XMLNSC = NULL ;
				END IF;
				--Add Close txn 
				DECLARE req_inputMsg REFERENCE TO enVariables.inputMsg.MOBILY_BSL_SR ;
				IF req_inputMsg.SR_HEADER.FuncId = 'PAYMENT_REVERSE' THEN
					
					SET OutputRoot.XMLNSC = NULL ;
					SET enVariables.CloseTXN.FuncId				= req_inputMsg.SR_HEADER.FuncId;--payment.FUNC_ID ;
					SET enVariables.CloseTXN.MsgVersion			= req_inputMsg.SR_HEADER.MsgVersion;--enVariables.MsgVersion ;
					SET enVariables.CloseTXN.RequestorChannelId	= req_inputMsg.SR_HEADER.RequestorChannelId ;
					SET enVariables.CloseTXN.SrDate				= FinalDate;--req_inputMsg.SR_HEADER.SrDate ;
					SET enVariables.CloseTXN.RequestorUserId	= req_inputMsg.SR_HEADER.RequestorUserId ;
					SET enVariables.CloseTXN.RequestorLanguage	= req_inputMsg.SR_HEADER.RequestorLanguage ;
					SET enVariables.CloseTXN.OverwriteOpenOrder	= req_inputMsg.SR_HEADER.OverwriteOpenOrder ;
					SET enVariables.CloseTXN.Chargeable			= req_inputMsg.SR_HEADER.Chargeable ;
					SET enVariables.CloseTXN.ChargeAmount		= req_inputMsg.SR_HEADER.ChargeAmount ;
					SET enVariables.CloseTXN.SrId				= SRID ;
					SET enVariables.CloseTXN.DealerId			= req_inputMsg.DealerId ;
					SET enVariables.CloseTXN.ShopId				= req_inputMsg.ShopId ;
					SET enVariables.CloseTXN.AgentId			= req_inputMsg.AgentId ;
					SET enVariables.CloseTXN.ChannelTransId		= req_inputMsg.ChannelTransId ;
					SET enVariables.CloseTXN.LineNumber			= req_inputMsg.LineNumber ;
					SET enVariables.CloseTXN.PaymentReferenceNumber	= req_inputMsg.PaymentReferenceNumber ;
					SET enVariables.CloseTXN.ReversalCode 		= req_inputMsg.ReversalCode ;
					SET enVariables.CloseTXN.Comments			= req_inputMsg.Comments ;
					-- added by vishnu
					SET enVariables.CloseTXN.Amount				= req_inputMsg.Amount;
					SET enVariables.CloseTXN.Currency			= req_inputMsg.Currency;
					SET enVariables.CloseTXN.AdjustmentType		= req_inputMsg.AdjustmentType;
					SET enVariables.CloseTXN.AdjustmentCode		= req_inputMsg.AdjustmentCode;
					SET enVariables.CloseTXN.CustomerType		= req_inputMsg.CustomerType;
					SET enVariables.CloseTXN.ISREVENUE			= req_inputMsg.ISREVENUE;
					
					CALL CopyCloseTXN() ;
					SET OutputRoot.XMLNSC = NULL ;
					SET enVariables.AuditEntry.TRACKING_POINT 	= 6757 ;
					SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 1;
					SET enVariables.AuditEntry.MESSAGE 			=  Environment.Variables.LoyaltyMsg;
					CALL callAudit(enVariables.AuditEntry) ;
					
					IF 	(enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL' ) THEN
 					   	CALL ERPUPDATE(); 
 					  	SET OutputRoot.XMLNSC = NULL ;
						SET enVariables.AuditEntry.TRACKING_POINT 	= 870016 ;
						SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 1;
						SET enVariables.AuditEntry.MESSAGE 			=  enVariables.ERPMsg; 
						CALL callAudit(enVariables.AuditEntry) ;
					END IF;	
				END IF;	
				
			END IF ;
			-- As per doc no difference between normal SFRT and AsynchSFRT
			IF LENGTH(TRIM(enVariables.paymentInfo.SR_PAYMENT_TBL.FINAL_REPLY_QUEUE_MANAGER)) > 0 AND LENGTH(TRIM(enVariables.paymentInfo.SR_PAYMENT_TBL.FINAL_REPLY_QUEUE)) > 0 THEN
				SET enVariables.SrStatus = '6' ;
				PROPAGATE TO LABEL 'SFRT' ; 
				SET OutputRoot.XMLNSC = NULL ;
			END IF ; 
			
	        SET OutputRoot.XMLNSC.MOBILY_BSL_SR=null;
			DECLARE outRef REFERENCE TO OutputRoot; 
			SET outRef.XMLNSC.MOBILY_BSL_SR=Environment.Variables.inputMsg.MOBILY_BSL_SR;				
			--SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueManagerName = Environment.Variables.inputMsg.MOBILY_BSL_SR.FINAL_REPLY_QUEUE_MANAGER;vishnu
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'INTERNAL.FUNC.ADJ.PAYMENTS.NEWCONTROL.REQ.NEW'; 				 
			 	
			
--			SET enVariables.newQ4 =
--			PASSTHRU('INSERT INTO SR_PAYMENT_AUDIT_TBL (ID, SR_ID, CHANNEL_TRANS_ID, LINE_NUMBER,TIMESTAMP, TRACKING_POINT, TRACKING_POINT_STATUS,BE_REFERENCE_NUMBER, 
--							NEW_BALANCE, MESSAGE, BE_REFERENCE_ID, BE_REFERENCE_TYPE,MESSAGE_ID) VALUES (SR_PAYMENT_AUDIT_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
--							VALUES (SRID,payment.CHANNEL_TRANS_ID,payment.LINE_NUMBER,CURRENT_TIMESTAMP ,6762,1,
--							null, null,	SUBSTRING(CAST(ASBITSTREAM(replyMsg) AS CHARACTER CCSID 1208)FROM 1), null, null, null ));
							--Point.BackEnd RefNumber,Point.NewBalanc,Point.Message,Point.BackE ndRefId,Point.BackEndRefNumberType,payment.Report MsgId) ;
			--sendToAdjustmentNewControllerQueue      Send internal message to ADJUSTMENT_NEWCONTROL_INTERNAL_QUEUE
			--SET OutputRoot = InputRoot ;
			--SET OutputRoot.XMLNSC = NULL ;
			
			--SET OutputRoot.DFDL.ControlNewFlow.record.field1 = OUTMSG ;
			
			PROPAGATE TO TERMINAL 'out' DELETE NONE ;
			
			SET OutputRoot.DFDL = NULL ;
			DECLARE refNum CHARACTER;
			SET refNum = enVariables.paymentRefNumber;
			SET refNum=SUBSTRING((refNum||'                                ') FROM 1 FOR 32);
			IF payment.FUNC_ID = 106 THEN -- 106 means Payment Reversed  
				SET enVariables.newQ4 = PASSTHRU('UPDATE EE_AUDIT SET STATUS = 70 WHERE REFERENCENUMBER = ?' TO Database.DBORDSNNAME  VALUES(refNum)) ;
				PROPAGATE TO TERMINAL 'out2' DELETE NONE ;
--				--insert into EE_AUDIT_EXT
--				--Start JK19-16632
--				INSERT INTO Database.DBORDSNNAME.EE_AUDIT_EXT(REFERENCENUMBER,FIELDNAME,FIELDVALUE)
--				VALUES (refNum, 'PAYMENTREVERSALTIMESTAMP', CURRENT_TIMESTAMP);
--				--end Jk19-16632 
			END IF ;
			SET enVariables.newQ4 =
				PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET  TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP,SRID)) ;
			-- DELETE PAYMENT RETRY
			DELETE FROM Database.SR_PAYMENT_RETRY_TBL AS dlt WHERE dlt.SR_ID = SRID ;
			
			
		ELSEIF enVariables.replyStatusCode IN ('E220001', 'E220003') THEN --CAST(enVariables.replyStatusCode AS INTEGER) = 6 THEN
			DECLARE RetryCount INTEGER 0 ;
			DECLARE QUERY CHARACTER '' ;
			DECLARE bldata BOOLEAN ;
			SET enVariables.RetryCount.SR_PAYMENT_RETRY_TBL[] = SELECT cnt.COUNTER FROM Database.SR_PAYMENT_RETRY_TBL AS cnt WHERE cnt.SR_ID = SRID ;
			SET RetryCount = COALESCE(enVariables.RetryCount.SR_PAYMENT_RETRY_TBL.COUNTER, 0) ;
			IF threshold_RetryCnt > RetryCount THEN
				SET enVariables.newQ8 = 
				PASSTHRU('UPDATE SR_PAYMENT_RETRY_TBL SET COUNTER = ?, TIMESTAMP = ?, STATUS = 3 WHERE SR_ID = ?' VALUES(CAST(RetryCount + 1 AS CHARACTER), CURRENT_TIMESTAMP, SRID)) ;
--				SET QUERY = 'UPDATE SR_PAYMENT_RETRY_TBL SET COUNTER = ' || CAST(RetryCount + 1 AS CHARACTER) || ', TIMESTAMP = CURRENT_TIMESTAMP , STATUS = 3 WHERE SR_ID = ' || SRID ;
--			--	UPDATE Database.SR_PAYMENT_RETRY_TBL SET COUNTER = RetryCount + 1, TIMESTAMP = CURRENT_DATE , STATUS = 3 WHERE SR_ID = SRID ;
--				SET enVariables.newQ8 = PASSTHRU(QUERY) ;
				--JK19-4555
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					SET enVariables.newQ4 =
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 3, ERROR_CODE = 1111 WHERE SR_ID = ? AND STATUS <> 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
				ELSE
					SET enVariables.newQ4 =
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 3, ERROR_CODE = 13004 WHERE SR_ID = ? AND STATUS <> 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
					END IF;
					
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					SET enVariables.newQ4 =
				PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET STATUS = 3, ERROR_CODE = 1111, TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP,SRID)) ;
				ELSE
					SET enVariables.newQ4 =
				PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET STATUS = 3, ERROR_CODE = 13004, TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP,SRID)) ;
					END IF;
--				SET enVariables.newQ4 =
--				PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET STATUS = 3, ERROR_CODE = 13004, TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP,SRID)) ;
				
				IF enVariables.paymentInfo.SR_PAYMENT_TBL.ADJUSTMENT_TYPE = '2' THEN
					--sendAsynchSFRT
--					SET enVariables.SrStatus = '3' ;
--					SET enVariables.errorCode = '13004' ;
					PROPAGATE TO LABEL 'SFRT' ;
					SET OutputRoot.XMLNSC = NULL ;
--				ELSE
--					SET enVariables.SrStatus = '3' ;
--					SET enVariables.errorCode = '13004' ;
--					PROPAGATE TO LABEL 'SFRT' ;
--					SET OutputRoot.XMLNSC = NULL ;
					--sendAsynchSFRT
				END IF ;
				
				IF LENGTH(enVariables.finalReplyQueue) > 0 AND LENGTH(enVariables.finalReplyQueueManager) > 0 THEN
					PROPAGATE TO LABEL 'SFRT' ;
					SET OutputRoot.XMLNSC = NULL ;
				END IF ;
				
				SET enVariables.AuditEntry.TRACKING_POINT 	= 6762 ;
				SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 2 ;
				SET enVariables.AuditEntry.MESSAGE 			= CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
				CALL callAudit(enVariables.AuditEntry) ;
				
--				SET enVariables.newQ5 =
--				PASSTHRU('INSERT INTO SR_PAYMENT_AUDIT_TBL (ID, SR_ID, CHANNEL_TRANS_ID, LINE_NUMBER,TIMESTAMP, TRACKING_POINT, TRACKING_POINT_STATUS,
--							BE_REFERENCE_NUMBER, NEW_BALANCE, MESSAGE, BE_REFERENCE_ID, BE_REFERENCE_TYPE,MESSAGE_ID) VALUES (SR_PAYMENT_AUDIT_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
--							VALUES (SRID,payment.CHANNEL_TRANS_ID,payment.LINE_NUMBER,CURRENT_DATE ,6762, 2 ,
--							null, null,	enVariables.SFRT, null, null, null )); 
						--	Point.BackEndRe fNumber,Point.NewBalanc,Point.Message,Point.BackEnd RefId,Point.BackEndRefNumberType,payment.ReportMs gId)
				
			ELSE
				SET enVariables.newQ6 =
				PASSTHRU('UPDATE SR_PAYMENT_RETRY_TBL SET COUNTER = ?, TIMESTAMP = ?, STATUS = 3 WHERE SR_ID = ?' VALUES (CAST(RetryCount + 1 AS CHARACTER), CURRENT_TIMESTAMP, SRID)) ;
--				SET QUERY = 'UPDATE SR_PAYMENT_RETRY_TBL SET COUNTER = ' || CAST(RetryCount + 1 AS CHARACTER) || ', TIMESTAMP = CURRENT_TIMESTAMP , STATUS = 3 WHERE SR_ID = ' || SRID ;
--				SET bldata = PASSTHRU(QUERY) ;

				SET enVariables.AuditEntry.TRACKING_POINT 	= 6762 ;
				SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 2 ;
				SET enVariables.AuditEntry.MESSAGE 			= CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
				CALL callAudit(enVariables.AuditEntry) ;
--				SET enVariables.newQ6 = 
--				PASSTHRU('INSERT INTO SR_PAYMENT_AUDIT_TBL (ID, SR_ID, CHANNEL_TRANS_ID, LINE_NUMBER,TIMESTAMP, TRACKING_POINT, TRACKING_POINT_STATUS,
--							BE_REFERENCE_NUMBER, NEW_BALANCE, MESSAGE, BE_REFERENCE_ID, BE_REFERENCE_TYPE,MESSAGE_ID) VALUES (SR_PAYMENT_AUDIT_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
--							VALUES (payment.SRID,payment.CHANNEL_TRANS_ID,payment.LINE_NUMBER,CURRENT_DATE ,6762, 2 ,
--							null, null,	ch_respInMsg, null, null, null ));
						--	Point.BackEndRe fNumber,Point.NewBalanc,Point.Message,Point.BackEnd RefId,Point.BackEndRefNumberType,payment.ReportMs gId)
				--JK19-4555  
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
				   SET enVariables.newQ6 = 
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 219, ERROR_CODE = 1111 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
				ELSE 
					SET enVariables.newQ6 = 
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 219, ERROR_CODE = 13004 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
				END IF;
			END IF ;
			
		ELSE
			IF enVariables.paymentInfo.SR_PAYMENT_TBL.ADJUSTMENT_TYPE = '1' THEN
				--JK19-4555 
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					SET enVariables.newQ6 = 
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 224, ERROR_CODE = 1111 
																WHERE SR_ID = ? AND STATUS != 6' VALUES (CURRENT_TIMESTAMP, SRID)) ;
				ELSE 
					SET enVariables.newQ6 = 
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 224, ERROR_CODE = 13004 
															WHERE SR_ID = ? AND STATUS != 6' VALUES (CURRENT_TIMESTAMP, SRID)) ;
				END IF;												
			ELSE
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					SET enVariables.newQ6 = 
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 3, ERROR_CODE = 1111 
																WHERE SR_ID = ? AND STATUS != 6' VALUES (CURRENT_TIMESTAMP, SRID)) ;
				ELSE
					SET enVariables.newQ6 = 
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 3, ERROR_CODE = 13004 
															WHERE SR_ID = ? AND STATUS != 6' VALUES (CURRENT_TIMESTAMP, SRID)) ;
				END IF;																	
			END IF ;
			
			
			DECLARE RetryCount INTEGER 0 ;
			DECLARE QUERY CHARACTER '' ;
			DECLARE bldata BOOLEAN ;
			SET enVariables.RetryCount[] = SELECT cnt.COUNTER FROM Database.SR_PAYMENT_RETRY_TBL AS cnt WHERE cnt.SR_ID = SRID ;
			SET RetryCount = enVariables.RetryCount.COUNTER ;
			
			SET enVariables.newQ6 =
				PASSTHRU('UPDATE SR_PAYMENT_RETRY_TBL SET COUNTER = ?, TIMESTAMP = ?, STATUS = 3 WHERE SR_ID = ?' VALUES (CAST(RetryCount + 1 AS CHARACTER), CURRENT_TIMESTAMP, SRID)) ;
			
--			SET QUERY = 'UPDATE Database.SR_PAYMENT_RETRY_TBL SET COUNTER = ' || CAST(RetryCount + 1 AS CHARACTER) || ', TIMESTAMP = CURRENT_TIMESTAMP , STATUS = 3 WHERE SR_ID = ' || SRID ;
--		
--			SET bldata = PASSTHRU(QUERY) ;
--JK19-4555 
			IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
				SET enVariables.newQ6 =
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 219, ERROR_CODE = 1111 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
			
				SET enVariables.newQ6 =
				PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET STATUS = 3, ERROR_CODE = 1111, TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP, SRID)) ;
			
			ELSE 
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE') THEN  
					SET enVariables.newQ6 =
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 219, ERROR_CODE = 13004 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
					
					SET enVariables.newQ6 =
					PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET STATUS = 3, ERROR_CODE = 13004, TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP, SRID)) ;
				ELSE 
--					SET enVariables.newQ6 =
--					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 224, ERROR_CODE = 13006 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
					SET enVariables.newQ6 =
					PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 224, ERROR_CODE = 13006 WHERE SR_ID = ? ' VALUES(CURRENT_TIMESTAMP, SRID)) ;
					SET enVariables.newQ6 =
					PASSTHRU('UPDATE SR_SERVICEREQUEST_TBL SET STATUS = 224, ERROR_CODE = 13006, TIME_CLOSED = ? WHERE SR_ID = ?' VALUES (CURRENT_TIMESTAMP, SRID)) ;
				END IF;	 
			END IF;		 		
			
			SET enVariables.AuditEntry.TRACKING_POINT 	= 6762 ;
			SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 2 ;
			SET enVariables.AuditEntry.MESSAGE 			= CAST(ASBITSTREAM(InputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
			CALL callAudit(enVariables.AuditEntry) ;
			
--			SET enVariables.newQ7 =
--			PASSTHRU('INSERT INTO SR_PAYMENT_AUDIT_TBL (ID, SR_ID, CHANNEL_TRANS_ID, LINE_NUMBER,TIMESTAMP, TRACKING_POINT, TRACKING_POINT_STATUS,
--						BE_REFERENCE_NUMBER, NEW_BALANCE, MESSAGE, BE_REFERENCE_ID, BE_REFERENCE_TYPE,MESSAGE_ID) VALUES (SR_PAYMENT_AUDIT_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
--							VALUES (SRID,payment.CHANNEL_TRANS_ID,payment.LINE_NUMBER,CURRENT_DATE ,6762, 2 ,
--							null, null,	ch_respInMsg, null, null, null ));
						--	Point.BackEndRe fNumber,Point.NewBalanc,Point.Message,Point.BackEnd RefId,Point.BackEndRefNumberType,payment.ReportMs gId)
			IF enVariables.paymentInfo.SR_PAYMENT_TBL.ADJUSTMENT_TYPE = '2' THEN 
				-- sendSFRT
				SET enVariables.SrStatus = '3' ;
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					IF enVariables.replyStatusCode = 'E220106' THEN
						SET enVariables.errorCode = '2222' ;
						SET enVariables.errorMessage = 'Payment reversal request cannot be completed as the amount is not available in customer balance' ; 
						SET enVariables.newQ6 =
						PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? ,STATUS = 5,  ERROR_CODE = 2222 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
				ELSE 					
						SET enVariables.errorCode = '1111' ;
						SET enVariables.errorMessage = 'Failed/Backend application Error response' ; 
					END IF;
				ELSE
					SET enVariables.errorCode = '13004' ;
				END IF ;	
				PROPAGATE TO LABEL 'SFRT' ;
				SET OutputRoot.XMLNSC = NULL ;
			END IF ;
			
			IF LENGTH(TRIM(enVariables.paymentInfo.SR_PAYMENT_TBL.FINAL_REPLY_QUEUE_MANAGER)) > 0 AND LENGTH(TRIM(enVariables.paymentInfo.SR_PAYMENT_TBL.FINAL_REPLY_QUEUE)) > 0 THEN
				SET enVariables.SrStatus = '3' ;
				IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					IF enVariables.replyStatusCode = 'E220106' THEN
						SET enVariables.errorCode = '2222' ;
						SET enVariables.errorMessage = 'Payment reversal request cannot be completed as the amount is not available in customer balance' ; 
						SET enVariables.newQ6 =PASSTHRU('UPDATE SR_PAYMENT_TBL SET LAST_UPDATE_TIME = ? , STATUS = 5, ERROR_CODE = 2222 WHERE SR_ID = ? AND STATUS != 6' VALUES(CURRENT_TIMESTAMP, SRID)) ;
					ELSE 
						SET enVariables.errorCode = '1111' ;
						SET enVariables.errorMessage = 'Failed/Backend application Error response' ; 
					END IF;
				ELSE
					SET enVariables.errorCode = '13004' ;
				END IF;	
				PROPAGATE TO LABEL 'SFRT' ;
				SET OutputRoot.XMLNSC = NULL ;
				
				-- sendAsynchSFRT
			
			END IF ;
		END IF ;	
		
		RETURN FALSE;
	END;


 	CREATE PROCEDURE callAudit(IN env REFERENCE) BEGIN
		SET env.ActualData = OutputRoot ;
		SET OutputRoot.XMLNSC = NULL ;
		CALL createAuditMessage_ONL(env) ;
		SET OutputRoot.XMLNSC = env.OutputRoot.XMLNSC ;
		PROPAGATE TO LABEL 'AUDIT' DELETE NONE ;
		SET OutputRoot = env.ActualData ;
		SET env.OutputRoot = NULL ;
		SET env.ActualData = NULL ;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE CopyCloseTXN() BEGIN
              DECLARE enVariables REFERENCE TO Environment.Variables ;
              DECLARE enVarClsTXN REFERENCE TO enVariables.CloseTXN ;
             
              SET OutputRoot.XMLNSC = NULL ;
              CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'MOBILY_BSL_SR' ;
              DECLARE CLSTXN REFERENCE TO OutputRoot.XMLNSC.MOBILY_BSL_SR ;
             
              SET CLSTXN.SR_HEADER.FuncId 				= enVariables.CloseTXN.FuncId ;
              SET CLSTXN.SR_HEADER.MsgVersion 			= enVariables.CloseTXN.MsgVersion ;
              SET CLSTXN.SR_HEADER.RequestorChannelId 	= enVariables.CloseTXN.RequestorChannelId ;
              SET CLSTXN.SR_HEADER.SrDate 				= enVariables.CloseTXN.SrDate ;
              SET CLSTXN.SR_HEADER.RequestorUserId 		= enVariables.CloseTXN.RequestorUserId  ;
              SET CLSTXN.SR_HEADER.RequestorLanguage 	= enVariables.CloseTXN.RequestorLanguage  ;
              IF (UCASE(TRIM(enVariables.CloseTXN.OverwriteOpenOrder))='Y') THEN
			 	SET CLSTXN.SR_HEADER.OverwriteOpenOrder='Y';
			  ELSE
			 	SET CLSTXN.SR_HEADER.OverwriteOpenOrder='N';
			  END IF;
			  IF (UCASE(TRIM(enVariables.CloseTXN.Chargeable))='Y') THEN
			 	SET CLSTXN.SR_HEADER.Chargeable='Y';
			  ELSE
			 	SET CLSTXN.SR_HEADER.Chargeable='N';
			  END IF;
--              SET CLSTXN.SR_HEADER.OverwriteOpenOrder 	= enVariables.CloseTXN.OverwriteOpenOrder ;
--              SET CLSTXN.SR_HEADER.Chargeable 			= enVariables.CloseTXN.Chargeable ;
              SET CLSTXN.SR_HEADER.ChargeAmount 		= enVariables.CloseTXN.ChargeAmount	 ;
              SET CLSTXN.SR_HEADER.SrId 				= enVariables.CloseTXN.SrId	 ;
              SET CLSTXN.SR_HEADER.DealerId 			= COALESCE(enVariables.CloseTXN.DealerId,'') ;
              SET CLSTXN.SR_HEADER.ShopId 				= COALESCE(enVariables.CloseTXN.ShopId,'')  ;
              SET CLSTXN.SR_HEADER.AgentId 				= COALESCE(enVariables.CloseTXN.AgentId,'') ;
             
              SET CLSTXN.ChannelTransId 				= enVariables.CloseTXN.ChannelTransId ;
              SET CLSTXN.LineNumber 					= enVariables.CloseTXN.LineNumber ;
             
              --Added by vishnu
              IF enVariables.CloseTXN.FuncId = 'PAYMENT_REVERSE' THEN
	              SET CLSTXN.PaymentReferenceNumber 	= enVariables.CloseTXN.PaymentReferenceNumber ;
	              SET CLSTXN.ReversalCode 				= enVariables.CloseTXN.ReversalCode	 ;
              ELSE 
				SET CLSTXN.Amount 						= TRUNCATE(enVariables.paymentInfo.SR_PAYMENT_TBL.AMOUNT,1);--enVariables.CloseTXN.Amount;				
				SET CLSTXN.Currency 					= enVariables.CloseTXN.Currency	;		
				SET CLSTXN.AdjustmentType 				= enVariables.CloseTXN.AdjustmentType;
				SET CLSTXN.AdjustmentCode 				= enVariables.CloseTXN.AdjustmentCode;
				SET CLSTXN.CustomerType 				= enVariables.CloseTXN.CustomerType	;
				SET CLSTXN.ISREVENUE 					= enVariables.CloseTXN.ISREVENUE;
			 END IF;
             
--              SET CLSTXN.PaymentReferenceNumber 		= enVariables.CloseTXN.PaymentReferenceNumber ;
--              SET CLSTXN.ReversalCode 					= enVariables.CloseTXN.ReversalCode	 ;
              SET CLSTXN.Comments 						= enVariables.CloseTXN.Comments	 ;
              SET enVariables.LoyaltyMsg=CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
             PROPAGATE TO LABEL 'MEDIA' DELETE NONE ;
	END;
	
	CREATE PROCEDURE ERPUPDATE() BEGIN
              DECLARE enVariables REFERENCE TO Environment.Variables ;
              DECLARE enVarClsTXNERP REFERENCE TO enVariables.CloseTXN ;
             
              SET OutputRoot.XMLNSC = NULL ;
              CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'EE_EAI_MESSAGE' ;
              DECLARE CLSTXNERP REFERENCE TO OutputRoot.XMLNSC.EE_EAI_MESSAGE ;
             
				SET CLSTXNERP.EE_EAI_HEADER.RequestorChannelFunction = 'PAYMENT_REVERSE';
				SET CLSTXNERP.RequestorChannelId  = 'SBL';--enVariables.CloseTXN.RequestorChannelId ;
				SET CLSTXNERP.ReferenceNumber     = enVariables.CloseTXN.PaymentReferenceNumber ;
				SET CLSTXNERP.DealerID			  = COALESCE(enVariables.CloseTXN.DealerId,'');
				SET CLSTXNERP.ShopID         	  = COALESCE(enVariables.CloseTXN.DealerId,'');
				SET CLSTXNERP.AgentID             = COALESCE(enVariables.CloseTXN.DealerId,'');
				SET CLSTXNERP.PaymentType		  = '82';
				SET CLSTXNERP.PaymentMode		  = '';
				SET CLSTXNERP.PaymentReason		  = '1316';
				SET CLSTXNERP.AccountNumber		  = enVariables.getPaymentInfo.SR_PAYMENT.ACCOUNT_NUMBER;
				SET CLSTXNERP.LineNumber		  = enVariables.CloseTXN.LineNumber;
				--SET CLSTXNERP.Amount			  = -1 * enVariables.getPaymentInfo.SR_PAYMENT.AMOUNT;
				SET CLSTXNERP.ServiceName		  = 'New';
				SET CLSTXNERP.VATPaymentType	  = '82';
				SET CLSTXNERP.VATPaymentReason	  = '1316';
				
				DECLARE refNum CHARACTER enVariables.CloseTXN.PaymentReferenceNumber;
				IF (LENGTH(refNum)<32) THEN
		 			SET refNum=SUBSTRING((refNum||'                                ') FROM 1 FOR 32);
				END IF;

			 	SET Environment.Variables.eaiPayment=PASSTHRU('SELECT field1 acc_number,field3 line_number, field4 amount, field9 payment_type, field11 eai_ref, status, VAT_AMOUNT,NET_AMOUNT from ee_audit where referencenumber = ?'  TO Database.EAIDBOR VALUES(refNum));
			 	DECLARE resultRef REFERENCE TO Environment.Variables.eaiPayment;
			 	DECLARE vatamount DECIMAL;
			 	DECLARE Netamount DECIMAL;
				SET vatamount=resultRef.VAT_AMOUNT;
				SET Netamount=resultRef.NET_AMOUNT; 
				SET CLSTXNERP.Amount			  = Netamount;
				SET CLSTXNERP.VatAmount		      = vatamount;
				  
              SET enVariables.ERPMsg =CAST(ASBITSTREAM(OutputRoot.XMLNSC ENCODING 273 CCSID 1208) AS CHARACTER CCSID 1208 ENCODING 273); 
             PROPAGATE TO LABEL 'ERPUPDATE' DELETE NONE ;
       END;
	
END MODULE;

CREATE COMPUTE MODULE SFRT_Message
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		SET OutputRoot.XMLNSC = NULL ;
		DECLARE enVariables REFERENCE TO Environment.Variables ;
		
		DECLARE blsfrt BLOB ;
		
		DECLARE payment REFERENCE TO enVariables.paymentInfo.SR_PAYMENT_TBL ;
		 
		DECLARE ReplyQ,ReplyQMgr CHAR;
		IF Environment.Variables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'ADJUSTMENT_PAYMENT' THEN
			SET ReplyQ=COALESCE(enVariables.inputMsg.MOBILY_BSL_SR.ChannelReplyQueueName,enVariables.inputMsg.MOBILY_BSL_SR.Final_Reply_Queue,enVariables.paymentReqTemp.SR_PAYMENT_REQUEST_TEMP_TBL.CHNL_REPLY_TO_Q_NAME);
			SET ReplyQMgr=COALESCE(enVariables.inputMsg.MOBILY_BSL_SR.ChannelReplyQMName,enVariables.inputMsg.MOBILY_BSL_SR.FINAL_REPLY_QUEUE_MANAGER);
		    IF enVariables.paymentReqTemp.SR_PAYMENT_REQUEST_TEMP_TBL.CHNL_MSG_ID <> '' or enVariables.paymentReqTemp.SR_PAYMENT_REQUEST_TEMP_TBL.CHNL_MSG_ID is not null THEN
		        SET OutputRoot.MQMD.CorrelId = CAST(enVariables.paymentReqTemp.SR_PAYMENT_REQUEST_TEMP_TBL.CHNL_MSG_ID AS BLOB);--Environment.Variables.CorrelId;
		        -- Defect-QM-5500 changes end
				END IF;
		ELSE 	
			SET ReplyQ=COALESCE(enVariables.inputMsg.MOBILY_BSL_SR.ChannelReplyQueueName,enVariables.inputMsg.MOBILY_BSL_SR.Final_Reply_Queue,InputRoot.MQMD.ReplyToQ);
			SET ReplyQMgr=COALESCE(enVariables.finalReplyQueueManager,enVariables.inputMsg.MOBILY_BSL_SR.FINAL_REPLY_QUEUE_MANAGER,InputRoot.MQMD.ReplyToQMgr,enVariables.inputMsg.MOBILY_BSL_SR.ChannelReplyQMName);	  
		END IF;
		
		--Value of FINAL_REPLY_QUEUE column SR_PAYMENT_TBL DB select where SR_ID =  SR_BK_HEADER_Reply/ServiceRequestId
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'MOBILY_BSL_SR_REPLY' ;
		DECLARE outSuccMsg REFERENCE TO OutputRoot.XMLNSC.MOBILY_BSL_SR_REPLY ;
		--IF(ReplyQ<>'' AND ReplyQ NOT IN('MOBILY.FUNC.SUPPSVC.ADJUSTMENT.REPLY'))THEN
			SET outSuccMsg.SR_HEADER_REPLY.FuncId 				= enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId;--payment.FUNC_ID ;
			SET outSuccMsg.SR_HEADER_REPLY.MsgVersion 			= enVariables.MsgVersion ;
			SET outSuccMsg.SR_HEADER_REPLY.RequestorChannelId 	= enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId;--enVariables.RequesterChannelId ; 
			SET outSuccMsg.SR_HEADER_REPLY.SrDate 				= enVariables.SrDate ;
			SET outSuccMsg.SR_HEADER_REPLY.SrRcvDate 			= enVariables.SrReceiveTime ;
			SET outSuccMsg.SR_HEADER_REPLY.SrStatus				= enVariables.SrStatus ;
			
			
			
			SET outSuccMsg.ChannelTransId		= payment.CHANNEL_TRANS_ID ;
			SET outSuccMsg.ServiceRequestId		= enVariables.SRID ;
			--JK19-4555 
			SET outSuccMsg.ErrorMsg				= COALESCE(enVariables.errorMessage, '') ; 
			DECLARE ERRORCODE CHARACTER;
			IF (enVariables.errorCode = 0 ) THEN				
				SET ERRORCODE = '0000';
			ELSE
				SET ERRORCODE = COALESCE(enVariables.errorCode,'0000');
			END IF;
			-- JK19-4555
			
			IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
					SET outSuccMsg.ErrorCode			= COALESCE(ERRORCODE, '0000');-- COALESCE(enVariables.errorCode, '0000') ;
				ELSE
					SET outSuccMsg.ErrorCode			= COALESCE(ERRORCODE, '0000');
			END IF;
			
			
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName = ReplyQMgr;-- Environment.Variables.ParsedMsg.MOBILY_BSL_SR.FINAL_REPLY_QUEUE_MANAGER;
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = ReplyQ;
			SET blsfrt = ASBITSTREAM(OutputRoot.XMLNSC ENCODING 273 CCSID 1208);
			SET enVariables.SFRT = CAST(blsfrt AS CHARACTER CCSID 1208 ENCODING 273);
			IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE') THEN 
				SET enVariables.AuditEntry.SR_ID 			= enVariables.inputMsg.MOBILY_BSL_SR.ServiceRequestId ;
				SET enVariables.AuditEntry.CHANNEL_TRANS_ID = enVariables.inputMsg.MOBILY_BSL_SR.ChannelTransId ;
				SET enVariables.AuditEntry.LINE_NUMBER 		= enVariables.inputMsg.MOBILY_BSL_SR.LineNumber ;
				SET enVariables.AuditEntry.MESSAGE_ID 		= enVariables.msgId ;
				SET enVariables.AuditEntry.TRACKING_POINT 	= 107 ;
				SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 1 ;
				SET enVariables.AuditEntry.MESSAGE 			=enVariables.SFRT  ;
				CALL callAudit(enVariables.AuditEntry) ;
			END IF; 	
		-- IF(ReplyQ<>'' AND ReplyQ NOT IN('MOBILY.FUNC.SUPPSVC.ADJUSTMENT.REPLY'))THEN
		IF(ReplyQ<>'')THEN
			
			--JK19-4555
			
			SET enVariables.pmtInfo.SR_PAYMENT_TBL[] = SELECT ptmtbl.ASYNC_REPLY_SENT_CALLER FROM Database.SR_PAYMENT_TBL AS ptmtbl WHERE ptmtbl.PAYMENT_REF_NUMBER = enVariables.inputMsg.MOBILY_BSL_SR.PaymentReferenceNumber ;
			
			IF (enVariables.pmtInfo.SR_PAYMENT_TBL.ASYNC_REPLY_SENT_CALLER) = 'Yes' THEN
			  RETURN FALSE;
			END IF;
			IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'PAYMENT_REVERSE' AND enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.RequestorChannelId = 'SIEBEL') THEN
				UPDATE Database.SR_PAYMENT_TBL AS ptt SET ASYNC_REPLY_SENT_CALLER = 'Yes'  WHERE ptt.PAYMENT_REF_NUMBER = enVariables.inputMsg.MOBILY_BSL_SR.PaymentReferenceNumber ;
			COMMIT; 
			END IF;
			
			IF (enVariables.inputMsg.MOBILY_BSL_SR.SR_HEADER.FuncId = 'ADJUSTMENT_PAYMENT') THEN  
				SET enVariables.AuditEntry.SR_ID 			= enVariables.inputMsg.MOBILY_BSL_SR.ServiceRequestId ;
				SET enVariables.AuditEntry.CHANNEL_TRANS_ID = enVariables.inputMsg.MOBILY_BSL_SR.ChannelTransId ;
				SET enVariables.AuditEntry.LINE_NUMBER 		= enVariables.inputMsg.MOBILY_BSL_SR.LineNumber ;
				SET enVariables.AuditEntry.MESSAGE_ID 		= enVariables.msgId ;
				SET enVariables.AuditEntry.TRACKING_POINT 	= 107 ;
				SET enVariables.AuditEntry.TRACKING_POINT_STATUS = 1 ;
				SET enVariables.AuditEntry.MESSAGE 			=enVariables.SFRT  ;
				CALL callAudit(enVariables.AuditEntry) ;				

			END IF; 
			
			
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName = ReplyQMgr;-- Environment.Variables.ParsedMsg.MOBILY_BSL_SR.FINAL_REPLY_QUEUE_MANAGER;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = ReplyQ;
			
			RETURN TRUE;
			
		END IF;
		
		---Audit Entry-- 

		---Audit Entry-- 

		RETURN FALSE;
	 
	END;


 
CREATE PROCEDURE callAudit(IN env REFERENCE) BEGIN
		SET env.ActualData = OutputRoot ;
		SET OutputRoot.XMLNSC = NULL ;
		CALL createAuditMessage_SFRT1(env) ;
		SET OutputRoot.XMLNSC = env.OutputRoot.XMLNSC ;
		PROPAGATE TO LABEL 'AUDIT' DELETE NONE ;
		SET OutputRoot = env.ActualData ;
		SET env.OutputRoot = NULL ;
		SET env.ActualData = NULL ;
END;

     
CREATE PROCEDURE createAuditMessage_SFRT1(IN env REFERENCE) BEGIN

--              SET enVariables.OUTPUTROOT = OutputRoot ;
--
--              SET OutputRoot.XMLNSC = NULL ;

              CREATE LASTCHILD OF env.OutputRoot.XMLNSC NAME 'InsertPaymentAudit' ;
              DECLARE outAud REFERENCE TO env.OutputRoot.XMLNSC.InsertPaymentAudit ;

              SET outAud.SR_ID                  = env.SR_ID ;
              SET outAud.CHANNEL_TRANS_ID       = env.CHANNEL_TRANS_ID ;
              SET outAud.LINE_NUMBER            = env.LINE_NUMBER ;
              SET outAud.TRACKING_POINT         = env.TRACKING_POINT ;
              SET outAud.TRACKING_POINT_STATUS	= env.TRACKING_POINT_STATUS ;
              SET outAud.BE_REFERENCE_NUMBER    = env.BE_REFERENCE_NUMBER ;
              SET outAud.NEW_BALANCE            = env.Variables.NEW_BALANCE ;              
              SET outAud.MESSAGE                =CAST(COALESCE(env.AuditMsg,  env.MESSAGE) AS CHAR CCSID 1208) ;
               
              SET outAud.BE_REFERENCE_ID        = env.BE_REFERENCE_ID ;
              SET outAud.BE_REFERENCE_TYPE      = env.BE_REFERENCE_TYPE ;
              SET outAud.MESSAGE_ID             = env.MESSAGE_ID ;

             

--              PROPAGATE TO LABEL 'AUDIT' DELETE NONE ;
--
--              SET OutputRoot.XMLNSC = NULL ;
--
--              SET OutputRoot = enVariables.OUTPUTROOT ;
--
--              SET enVariables.OUTPUTROOT = NULL ;

       END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

    
CREATE PROCEDURE createAuditMessage_ONL(IN env REFERENCE) BEGIN

--              SET enVariables.OUTPUTROOT = OutputRoot ;
--
--              SET OutputRoot.XMLNSC = NULL ;

              CREATE LASTCHILD OF env.OutputRoot.XMLNSC NAME 'InsertPaymentAudit' ;
              DECLARE outAud REFERENCE TO env.OutputRoot.XMLNSC.InsertPaymentAudit ;

              SET outAud.SR_ID                  = env.SR_ID ;
              SET outAud.CHANNEL_TRANS_ID       = env.CHANNEL_TRANS_ID ;
              SET outAud.LINE_NUMBER            = env.LINE_NUMBER ;
              SET outAud.TRACKING_POINT         = env.TRACKING_POINT ;
			  SET outAud.TRACKING_POINT_STATUS	= env.TRACKING_POINT_STATUS ;
              SET outAud.BE_REFERENCE_NUMBER    = env.BE_REFERENCE_NUMBER ;
              SET outAud.NEW_BALANCE            = env.Variables.NEW_BALANCE ;              
              SET outAud.MESSAGE                =CAST(COALESCE(env.AuditMsg,  env.MESSAGE) AS CHAR CCSID 1208) ;
              SET outAud.BE_REFERENCE_ID        = env.BE_REFERENCE_ID ;
              SET outAud.BE_REFERENCE_TYPE      = env.BE_REFERENCE_TYPE ;
              SET outAud.MESSAGE_ID             = env.MESSAGE_ID ;

             

--              PROPAGATE TO LABEL 'AUDIT' DELETE NONE ;
--
--              SET OutputRoot.XMLNSC = NULL ;
--
--              SET OutputRoot = enVariables.OUTPUTROOT ;
--
--              SET enVariables.OUTPUTROOT = NULL ;

END;



CREATE COMPUTE MODULE OnlineChargeService_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--insert into EE_AUDIT_EXT
				--Start JK19-16632
				DECLARE refNum CHARACTER;
				DECLARE enVariables REFERENCE TO Environment.Variables ;
			SET refNum = enVariables.paymentRefNumber;
			SET refNum=SUBSTRING((refNum||'                                ') FROM 1 FOR 32);
				INSERT INTO Database.EE_AUDIT_EXT(REFERENCENUMBER,FIELDNAME,FIELDVALUE) VALUES (refNum, 'PAYMENTREVERSALTIMESTAMP', CURRENT_TIMESTAMP);
				--end Jk19-16632 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
