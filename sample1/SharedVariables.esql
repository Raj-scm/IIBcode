DECLARE PaymentTypes SHARED ROW ; 
DECLARE REVERSALPAYMENTTYPES SHARED ROW ; 
DECLARE REVERSABLEPOSTPAIDPAYMENTTYPES SHARED ROW ; 

--DECLARE BYPASSBACKENDREFPAYMENTTYPES SHARED ROW ;
--DECLARE BYPASSBILLINGBACKENDREFVALPAYMENTTYPES SHARED ROW;

--BypassBillingReversalPaymentTypes
--bypassbillingbackendrefvalpaymenttypes

DECLARE ChannelIDs SHARED ROW;
DECLARE initStatus_ADJ SHARED BOOLEAN FALSE;  
DECLARE initStatus SHARED BOOLEAN FALSE;  
 DECLARE DBORDSNNAME  NAME    'EAIDBOR'; 

DECLARE REVERSABLE_PREPAID_PAYMENTTYPES SHARED ROW; 
DECLARE REVERSABLE_POSTPAID_PAYMENTTYPES SHARED ROW ;

DECLARE BYPASS_BILLING_REVERSAL_PAYMENTTYPES SHARED ROW ;
DECLARE BYPASS_BILLING_BACKENDREFVAL_PAYMENTTYPES SHARED ROW;


DECLARE ALLOWED_ADJUSTMENT_CHANNEL_IDS SHARED ROW;  
DECLARE ALLOWED_REVERSAL_CHANNEL_IDS SHARED ROW;
--DECLARE EE_TABLE_QUERY CHAR 'SELECT field1 acc_number,field3 line_number, field4 amount, field9 payment_type, field11 eai_ref, status from ee_audit where referencenumber = ?'' VALUES(refNum)';
DECLARE INSERT_SR_PAYMENT_CHLTRANSID_UQ_TBL CHAR 'INSERT INTO Database.SR_PAYMENT_CHLTRANSID_UQ_TBL  (CHANNEL_TRANS_ID)  VALUES(TRIM(Environment.Variables.ParsedMsg.MOBILY_BSL_SR.ChannelTransId)';
DECLARE SR_PAYMENT_PAYREFNUM_UQ_TBL CHAR 'INSERT INTO SR_PAYMENT_PAYREFNUM_UQ_TBL  (PAYMENT_REF_NUMBER, SR_ID )  VALUES ( ? , ? ) '' VALUES(Environment.Variables.ParsedMsg.MOBILY_BSL_SR.PaymentReferenceNumber, Environment.Variables.ParsedMsg.SRID)';
DECLARE DELETE_SR_PAYMENT_PAYREFNUM_UQ_TBL CHAR 'DELETE SR_PAYMENT_PAYREFNUM_UQ_TBL  WHERE SR_ID = ? '' VALUES(Environment.Variables.ParsedMsg.SRID)';
DECLARE REASONCODES SHARED ROW; 
DECLARE STAFF_REBATE_CODE SHARED CHAR;
DECLARE PR_RESOURCE_ID SHARED CHAR;
DECLARE PR_SECURITY_KEY SHARED CHAR;
DECLARE AVOID_DB_TRIP SHARED ROW;
   

DECLARE XE_TS_PATTERN CHARACTER 'dd-MMM-yy hh.mm.ss.SSSSSS';
DECLARE REVERSALPAYMENT_FUNCID INTEGER 106;
DECLARE RETRY_TBL_BE_QUEUE_NAME CHARACTER 'MOBILY.FUNC.PAYMENTS.ADJ.PORTALSERVICE.REQ.NEW';
DECLARE REQ_SFRT_QNAME CHARACTER;
 
/* 
 CREATE PROCEDURE ValidateMSISDN(IN msisdn CHAR)BEGIN
 if (msisdn <> null AND LENGTH(msisdn) > 12) THEN
 	return msisdn.matches("^(009665|9665|9668|2009|002009|002005|2005|002004|2004|05)?[0-9]{11}$");
 	}else if(msisdn!=null ){
 	return msisdn.matches("^(009665|9665|2009|002009|002005|2005|002004|2004|05)?[0-9]{8}$");
 	}else
			return false;
			
	
 END IF; 
 
 		
 END;
    
 	public static boolean isMSISDN(String msisdn) 
	{
		if (msisdn != null && msisdn.length() > 12) 
		{
			return msisdn.matches("^(009665|9665|9668|2009|002009|002005|2005|002004|2004|05)?[0-9]{11}$");
		}else if(msisdn!=null ){
			return msisdn.matches("^(009665|9665|2009|002009|002005|2005|002004|2004|05)?[0-9]{8}$");
		}else
			return false;
 	}
 */ 
 
 
     
 CREATE FUNCTION LoadSharedVariables()
 BEGIN
 	
 
 		 
 	IF(NOT EXISTS(AVOID_DB_TRIP.List[])) THEN		    
		 SET AVOID_DB_TRIP.List[]=SELECT T.* FROM Database.SR_PAYMENT_PROPERTIES_TBL AS T;
 	END  IF;
 	DECLARE TempRow ROW;
 	SET TempRow.List[]=	AVOID_DB_TRIP.List[];   
 	IF(NOT EXISTS(REVERSABLE_PREPAID_PAYMENTTYPES.List[])) THEN 
 	
		 SET REVERSABLE_PREPAID_PAYMENTTYPES.List[] =  SELECT  ITEM(T.PROPERTYVALUE) FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'PaymentTypes' AND T.PROPERTYNAME='Prepaid';
	END IF;
	IF(NOT EXISTS(REVERSABLE_POSTPAID_PAYMENTTYPES .List[])) THEN   
		 SET REVERSABLE_POSTPAID_PAYMENTTYPES.List[] = SELECT  ITEM(T.PROPERTYVALUE) FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'PaymentTypes' AND T.PROPERTYNAME='Postpaid';
	END IF;
	IF(NOT EXISTS(BYPASS_BILLING_REVERSAL_PAYMENTTYPES.List[])) THEN  
		SET BYPASS_BILLING_REVERSAL_PAYMENTTYPES.List[] = SELECT  ITEM(T.PROPERTYVALUE) FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'BypassBillingReversalPaymentTypes';
	END IF;
	
	
	IF(NOT EXISTS(BYPASS_BILLING_BACKENDREFVAL_PAYMENTTYPES.List[])) THEN  
		SET BYPASS_BILLING_BACKENDREFVAL_PAYMENTTYPES.List[] = SELECT  ITEM(T.PROPERTYVALUE) FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'bypassbillingbackendrefvalpaymenttypes';
	END IF;
	
	
	
	
	IF(NOT EXISTS(ALLOWED_ADJUSTMENT_CHANNEL_IDS.List[])) THEN  
		 SET ALLOWED_ADJUSTMENT_CHANNEL_IDS.List[] =  SELECT  T.PROPERTYNAME, T.PROPERTYVALUE FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'AllowedAdjustmentchannelIds';
	END IF; 	  
	
	IF(NOT EXISTS(ALLOWED_REVERSAL_CHANNEL_IDS.List[])) THEN  
		 SET ALLOWED_REVERSAL_CHANNEL_IDS.List[] =  SELECT  T.PROPERTYNAME, T.PROPERTYVALUE FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'AllowedReversalchannelIds';
	END IF; 	
	
	
 	 
 	IF(STAFF_REBATE_CODE IS NULL) THEN
	 	DECLARE RebateList  ROW; 
	 	SET RebateList.List[] =SELECT  T.PROPERTYVALUE FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'STAFF_REBATE_CODE';
	 	SET STAFF_REBATE_CODE=RebateList.List[1].PROPERTYVALUE;
 	END IF;  
 	IF(PR_RESOURCE_ID IS NULL) THEN  
 	DECLARE TempResourceId ROW;
 	SET  TempResourceId.List[]=SELECT   T.PROPERTYVALUE FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'PR_RESOURCE_ID';
 	SET PR_RESOURCE_ID=TempResourceId.List[1].PROPERTYVALUE;
 	END IF;
 	
 	IF(PR_SECURITY_KEY IS NULL) THEN  
 	DECLARE TempSecKey ROW; 
 	SET  TempSecKey.List[]=SELECT   T.PROPERTYVALUE FROM TempRow.List[] AS T WHERE T.PROPERTYGROUPNAME = 'PR_SECURITY_KEY';
 	SET PR_SECURITY_KEY=TempSecKey.List[1].PROPERTYVALUE;
 	END IF;
 	
 	SET TempRow.*=NULL;
  
 END;	
 
  
     
 